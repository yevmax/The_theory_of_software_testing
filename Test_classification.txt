*Классификация тестирования:

- Функциональное - направлено на проверку соответствия функциональных требований ПО к его реальным характеристикам.
	Основная задача - разрабатываемый продукт обладает всем функционалом, который требует заказчик. Это тестирование проводится на всех уровнях и проверяет то, что система делает.

- Нефункциональное - основная задача заключается в проверке соответствия свойств приложения с его нефункциональными требованиями. Мы проверяем, как наша система работает. По сути это тестирование свойств, которые не относятся к функциональности системы. 



*К Нефункциональному тестированию относится:
	1) Тестирование на отказ и восстановление.
	2) Тестирование производительности:
		- нагрузочное
		- стресс
		- стабильности
		- объемное 
	3) Удобство юзабилити (проверяется соответствие дизайна приложения к его функциональности, которая задается заказчиком. Использование цвета в графических элементах с точки зрения восприятия для пользователя, удобство навигации, ссылки, анализ текста и т.д.)
	4) Тестирование безопасности (насколько просто неавторизованный пользователь или постороннее лицо получит доступ к системе, доступ к данным. Как реализована защищенность нашего продукта)
	5) Тестирование установки (установка, настройка, обновление, удаление приложения)
	6) Конфигурационное тестирование (исследуем работоспособность на разных платформах)
		- кроссплатформенное тестирование 
		- кроссбраузерное тестирование
	7) Тестирование локализации	
	8) Тестирование интернационализации 
	9) Тестирование GUI (на том ли месте находятся кнопки, показанные в шаблоне, который предоставил дизайнер, цветовая стилистика в одном тоне т.д. Все согласно требованиям.
	10) Тестирование доступности


*По позитивности тестовых сценариев:
	- позитивные (сценарии, которые соответствуют нормальному ожидаемому поведению системы. Определяем то, что система делает, то, для чего была создана.
	- негативные (сценарии, которые соответствуют внештатному поведению системы, неверные данные, исключительные ситуации, например, если взять калькулятор - деление на 0. Должен выдать ошибку.

! Очень важно понимать, что главным результатом в обоих случаях является корректное поведение программы.


*По исполнению сценария:
	1) ad-hoc тестирование – без использования каких-либо спецификаций, планов, тест кейсов, чисто импровизация, понимание на уровне интуиции, как оно должно работать
	2) исследовательское – не требует написание тест кейсов, но подразумевает, что каждый последующий тест подразумевает создание на основе результатов предыдущего теста, и если знаешь приложение, видишь не первый раз, знаешь что должно быть ожидаемым результатом в каком-либо модуле, берешь и тестируешь, без какой-либо документации.
	3) Сценарное – классическое тестирование, по написанным и задокументированным тестовым сценариям.


*По степени важности или связанное с изменениями:
	1) Smoke – на начальном этапе, после нового билда. Билд - это промежуточная версия нашего продукта. Смоук тест направлен на проверку готовности разработанного продукта к проведению расширенного тестирования и определение общего состояния качества продукта. Обычно это короткий тест, что приложение выполняет или нет свои основные функции. Пример: если магазин, тест кейс – логинимся, нашли товар, корзина, оплата, получение. Можно все в один тест кейс записать. Если все работает, то смоук тест проведен успешно. Два пути развития да или нет. Если нет, дальнейшее тестирование не производится. 
	2) Тест критического пути. Critical past testing – основной тип тест испытаний, во время которого значимые элементы и функции приложения проверяются на предмет правильности работы при стандартном использовании. Типичные задачи типичного пользователя. Могут быть позитивные и негативные.
	3) Расширенный тест extended test- проверка нестандартного использования продукта. Введение спец символов в поле логин, работа в нескольких вкладках одноврменно, нелогично кликать по кнопкам. Максимально загружать систему и т.д.


*По цели тестирования:
	1) New feature testing. Тестирование новой функциональности - проверка качества новой функциональности. Обычно тестируется полным тестом, смоук. критического пути и расширенное тестирование.
	2) Regression testing. Регрессионное тестирование - тестирование ранее проверенной функциональности, с целью удостовериться, что изменения в коде, исправление дефекта и т.д. не повлияло на работу прежней функциональности. Обязательно проводится в каждом билде.
		Как осуществить выборку тестов для регрессии?
		- Нужно включать тесты, которые покрывают тестирование безопасности, либо критически важных функций для бизнеса
		- Часто меняющиеся области
		- Тесты функций с высокой вероятностью ошибки
	3) Re-test - проверка правильности исправления дефекта. Убедиться, что пофикшеный дефект и функциональность отрабатывается так, как задуманно в требованиях.


*По степени автоматизации:
	1) Ручное - без каких-либо средств автоматизации.
	2) Автоматизированное - использование спец ПО. (чаще всего автоматизируют регрессию и смоук)


*По знанию кода:
	1) Черный ящик - не знаем, как устроена система. Техника тестирования основа на работе исключительно с внешними интерфейсами тестируемой системы, не зная программный код. Тестируем только GUI.
	2) Белый ящик - известны все детали реализации тестируемой программы, внутренняя структура, устройство и реализация известна тестировщику.
	3) Серый ящик - известны только некоторые особенности реализации тестируемой системы. Такой метод тестирования ПО, который предполагает комбинацию двух предыдущих.


*По уровням:
	1) компонентный - тестирование отдельных модулей (корзина, оплата товара)
	2) интеграционный - взаимодействие отдельных модулей между собой
	3) системный - проверка полностью приложения
	4) приемочное - тестирование на этапе сдачи продукта заказчику. Определение готовности продукта, финальный этап перед релизом.
		
	Виды приемочного:
	- пользовательское (некоторая группа пользователей, которые тестируют наш продукт)
	- эксплуатационное (пользователи, либо администратор в среде, имитирующую реальную. Проверка резервного копирования, либо аварийного восстановления)
	- тестирование на соответствие контракту (проверка на соответствие в спеке, либо другим документам, нормативно правовым актам, гостам и т.д. Например GTPR - требования к защите пользовательских данных. Если не учесть их при разработке, можно получить огромные штрафы.
	- альфа - тестирование на стороне разработчиков
	- бета - тестирование на внешней стороне, без участия разработчиков


